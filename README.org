#+TITLE: erudite-macs
#+AUTHOR: uncomfyhalomacro
#+ATTR_ORG: :radio t
#+PROPERTY: header-args :tangle init.el

* Table of Contents :TOC:
- [[#summary][Summary]]
- [[#some-stuff-that-needs-to-be-done-04][Some stuff that needs to be done]]
- [[#emacs-config][Emacs Config]]
- [[#starter-settings][Starter settings]]
- [[#main-configurations][Main configurations]]

* Summary
  I am currently learning how to use emacs so this config might be messy
  and somewhat not to your liking. I am configuring this config for note-taking,
  journaling, and coding for haskell, julia, and rust. When done editing the config, do =C-c C-v t= to tangle.

* TODO Some stuff that needs to be done [1/4]
  - [ ] User-defined keymaps, soon™️
  - [X] Julia-repl is chosen.
  - [ ] Split-up .el files
  - [ ] Setup org mode for note-taking

* Emacs Config
  These are the configuration code in elisp for my emacs config.

* Starter settings
  These includes an initial customized settings plus bootstrapping of `straight.el`.
  
  #+begin_src elisp
    (setq inhibit-startup-message t)
    (set-frame-font "JuliaMono 10" nil t)
    (xterm-mouse-mode t)
    (menu-bar-mode -1)
    (setq visible-bell t)
    ;; Use straight.el bootstrap script
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))

      (load bootstrap-file nil 'nomessage))

    ;; Integrate straight with use-package
    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
  #+end_src

* Main configurations
  We call straight to install our packages. We also use use-package which is already integrated to straight
  from the previous configuration. I will be splitting these up one day but not now.

  #+begin_src elisp
    (straight-use-package 'ayu-theme)
    (straight-use-package 'catppuccin-theme)
    (use-package page-break-lines
      :config
      (page-break-lines-mode))
    (use-package projectile
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
    (use-package dashboard
      :straight t
      :config
      (dashboard-setup-startup-hook))
    (use-package evil
      :straight t
      :config
      (evil-mode 0))
    (straight-use-package 'julia-mode)
    (straight-use-package 'elcord)
    (use-package vterm
      :straight t)
    (use-package all-the-icons
      :straight t
      )
    (use-package neotree
      :straight t
      :after all-the-icons
      :init
      (setq neo-theme (if (display-graphic-p) 'icons 'nerd))
      :config 
      (global-set-key [f8] 'neotree-toggle))
    (use-package toc-org
      :straight t)
    (use-package org-auto-tangle
      :after toc-org
      :defer t
      :straight t
      :config
      :hook (org-mode . org-auto-tangle-mode))
    (straight-use-package 'gruvbox-theme)
    (straight-use-package 'lsp-mode)
    (straight-use-package 'company)

    ;; Load packages
    (require 'ayu-theme)
    (require 'elcord)
    (use-package flycheck
      :straight t
      :init (global-flycheck-mode))
    (elcord-mode 1)
    (company-mode)
    (add-hook 'after-init-hook 'global-company-mode)
    (use-package magit
      :defer t
      )

    ;; Shell
    (use-package lsp-sh
      :init
      (setq lsp-sh-enable t)
      :hook
      (sh-mode . lsp-sh-enable))

    ;; Julia
    (use-package julia-repl
      :straight t
      :hook (
	     (julia-mode . julia-repl-mode))
      :config
      (julia-repl-set-terminal-backend 'vterm)
      )
    (use-package lsp-julia
      :config
      (setq
	    lsp-julia-command "julia"
	    lsp-julia-package-dir "@emacs-lspconfig"
	    lsp-julia-flags `(,(concat "--project=" lsp-julia-package-dir)
			      "--startup-file=no"
			      "--history-file=no"
			      ,(concat "-J" (getenv "HOME") "/.julia/environments/emacs-lspconfig/languageserver.so"))
	    lsp-julia-default-environment (shell-command-to-string "julia --startup-file=no --history-file=no -e 'print(dirname(Base.active_project()))'")))

    ;; Rust
    (use-package rust-mode
      :straight t)
    (use-package rustic
      :straight t
      :config (setq rustic-analyzer-command '("/usr/local/bin/rust-analyzer")))

    (use-package treemacs
      :straight t
      :config
      (treemacs-follow-mode 1)
      (treemacs-project-follow-mode 1)
      )


    (use-package lsp-mode
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)

	     (julia-mode . lsp)
	     (rust-mode . lsp)
	     (sh-mode . lsp)

	     ;; if you want which-key integration
	     (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)
    ;; optionally

    (use-package lsp-ui
      :init
      (setq lsp-ui-sideline-enable t
	    lsp-ui-doc-border "#BDAE93"
	    lsp-ui-sideline-show-code-actions t
	    lsp-ui-sideline-show-diagnostics t
	    lsp-signature-auto-activate nil
	    lsp-signature-render-documentation nil
	    lsp-ui-doc-show-with-cursor t
	    lsp-eldoc-enable-hover nil
	    lsp-completion-show-detail t
	    lsp-completion-show-kind t
	    lsp-ui-doc-position 'at-point
	    lsp-ui-doc-enable t)
      :commands lsp-ui-mode)
    ;; if you are helm user
    (use-package helm-lsp :commands helm-lsp-workspace-symbol)
    ;; if you are ivy user
    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
    (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
    ;; optionally if you want to use debugger
    (use-package dap-mode)
    ;; dap-julia has not yet been implemented


    ;; optional if you want which-key integration
    (use-package which-key
      :config
      (which-key-mode))

    ;; File Explorer

    ;; Treesitter support
    (straight-use-package 'tree-sitter)
    (straight-use-package 'tree-sitter-langs)
    (require 'tree-sitter)
    (require 'tree-sitter-hl)
    (require 'tree-sitter-langs)
    (require 'tree-sitter-debug)
    (require 'tree-sitter-query)
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

    ;; Themes
    (load-theme 'catppuccin t)

    ;; User defined keymaps
			;;;; Org-Mode

    (global-set-key (kbd "C-c l") #'org-store-link)
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)
    (global-set-key (kbd "C-c ;") #'comment-line)
    (global-set-key (kbd "C-c C-;") #'comment-region)

  #+end_src
  

  
